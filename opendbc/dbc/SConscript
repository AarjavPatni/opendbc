Import("env")

# Get generator script path
generator = File("generator/generator.py")

# Find all source files that could affect generation
import glob
from pathlib import Path
import os

source_files = []
output_files = []

# Add all Python scripts and DBC files as dependencies
for f in Path("generator").rglob("*"):
    if f.is_file() and (
        f.suffix == ".py" or (f.suffix == ".dbc" and not f.name.startswith("_"))
    ):
        source_files.append(File(str(f)))
        # Track expected output files for DBCs
        if f.suffix == ".dbc" and not f.name.startswith("_"):
            output_files.append(f.name.replace(".dbc", "_generated.dbc"))

# Run generator script once to process everything
generated = env.Command(
    target=output_files,
    source=[generator] + source_files,
    action="python3 ${SOURCES[0]}",
)

# Clean up all generated files
env.Clean(generated, output_files)
